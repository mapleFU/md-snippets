use std::str::FromStr;
use crate::calculator_ast;

grammar;

// pub Calcllist: i32 = {
//     <c: Calcllist> "\n" <e: Expr> => {
//         println!("= {:?}", e);
//         0
//     },
//     <c: Calcllist> "\n" => {
//         print!("> ");
//         0
//     },
// };

// "==" => Equal,
// ">=" => LargerOrEqual,
// ">" => LargerThan,
// "<=" => LessOrEqual,
// "<" => LessThan,


pub Expr: calculator_ast::Expr = {
    CmpAndFnExpr,
    // 这个表达式是右结合的，所以在右侧
    <s: VarName> "=" <e: Expr> => {
        calculator_ast::Expr::Assign(
            s.into(),
            Box::new(e),
        )
    },
}

// Comparing 没有优先级
pub CmpAndFnExpr: calculator_ast::Expr = {
    MulExpr,
    <left: CmpAndFnExpr> Equal <right: MulExpr> => {
        calculator_ast::Expr::TwoOp(
            calculator_ast::Opcode::Equal,
            Box::new(left),
            Box::new(right)
        )
    },
    <s: CmpAndFnExpr> LargerOrEqual <e: MulExpr> => {
        calculator_ast::Expr::TwoOp(
            calculator_ast::Opcode::LargerOrEqual,
            Box::new(s),
            Box::new(e)
        )
    },
    <s: CmpAndFnExpr> LargerThan <e: MulExpr> => {
        calculator_ast::Expr::TwoOp(
            calculator_ast::Opcode::LargerThan,
            Box::new(s),
            Box::new(e)
        )
    },
    <s: CmpAndFnExpr> LessOrEqual <e: MulExpr> => {
        calculator_ast::Expr::TwoOp(
            calculator_ast::Opcode::LessOrEqual,
            Box::new(s),
            Box::new(e)
        )
    },
    <s: CmpAndFnExpr> LessThan <e: MulExpr> => {
        calculator_ast::Expr::TwoOp(
            calculator_ast::Opcode::LessThan,
            Box::new(s),
            Box::new(e)
        )
    },
}

// Expr is for mul / div
pub MulExpr: calculator_ast::Expr = {
    Factor,
    <e: MulExpr> "+" <f: Factor> => {
        let left = Box::new(e);
        let right = Box::new(f);
        calculator_ast::Expr::TwoOp(
            calculator_ast::Opcode::Add,
            left,
            right
        )
    },
    <e: MulExpr> "-" <f: Factor> => {
        let left = Box::new(e);
        let right = Box::new(f);
        calculator_ast::Expr::TwoOp(
            calculator_ast::Opcode::Sub,
            left,
            right
        )
    },
};


pub Factor: calculator_ast::Expr = {
    Num,
    <f: Factor> "*" <n: Num> => {
        let left = Box::new(f);
        let right = Box::new(n);
        calculator_ast::Expr::TwoOp(
            calculator_ast::Opcode::Mul,
            left,
            right
        )
    },
    <f: Factor> "/" <n: Num> => {
        let left = Box::new(f);
        let right = Box::new(n);
        calculator_ast::Expr::TwoOp(
            calculator_ast::Opcode::Div,
            left,
            right
        )
    },
};

// only pub will generate parser.
pub Num: calculator_ast::Expr = { 
    <s:r"[0-9]+"> => { 
        // return a number expr.
        calculator_ast::Expr::Number(
            calculator_ast::Number::from_i64(i64::from_str(s).unwrap())
        )
    },
    "(" <e: Expr> ")" => {
        // Just return itself
        e
    },
    "-" <n: Num> => {
        let node = Box::new(n);
        calculator_ast::Expr::OneOp(
            calculator_ast::Opcode::Sub,
            node
        )
    },
    <s: r"[0-9]+\.[0-9]*([Ee][-+]?[0-9]+)?"> => {
        let fv = f64::from_str(s).unwrap();
        calculator_ast::Expr::Number(
            calculator_ast::Number::from_f64(fv)
        )
    },
    <s: r"\.?[0-9]+([Ee][-+]?[0-9]+)?"> => {
        let fv = f64::from_str(s).unwrap();
        calculator_ast::Expr::Number(
            calculator_ast::Number::from_f64(fv)
        )
    },
};

match {
    r"[0-9]+",
    "==" => Equal,
    ">=" => LargerOrEqual,
    ">" => LargerThan,
    "<=" => LessOrEqual,
    "<" => LessThan,
 
    r"[a-zA-Z][a-zA-Z0-9]*" => VarName,
    // skip whitespaces
    r"\s*" => { },
    r"//[^\n\r]*[\n\r]*" => { }, // `// comment`
    r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { }, // `/* comment */`
} else {
    r"\.?[0-9]+([Ee][-+]?[0-9]+)?",
    _
}